# Resolver: Required by openidc to resolve URLs, like the OIDC discovery Doc
resolver 8.8.8.8;

# use the default ca-bundle provided with CoreOS
lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.trust.crt;
lua_ssl_verify_depth 5;

#PROXY SSL Configuration
proxy_ssl_server_name on;
proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

# cache for OIDC Discovery Doc
lua_shared_dict discovery 1m;
# cache for JWKs
lua_shared_dict jwks 1m;

server {
    listen      80;
    server_name __HOST__;
    rewrite     ^   https://$server_name$request_uri? permanent;
}

server {
  listen       443;
  server_name  __HOST__;

  ssl									on;
  ssl_certificate_key /etc/ssl/certs/nginx_server.key;
  ssl_certificate     /etc/ssl/certs/nginx_server.crt;
  ssl_session_timeout 30m;

  location / {
    # OIDC configuration
    access_by_lua_block {
      local opts = {
        -- Discovery doc, credentials, and request params
        discovery = "__OKTA_AUTHZ_SERVER__/.well-known/openid-configuration",
        client_id = "__CLIENT_ID__",
        client_secret = "__CLIENT_SECRET__",
        scope = "openid email profile __API_SCOPE__",
        token_endpoint_auth_method = "client_secret_basic",

        -- URLs within the Server
        redirect_uri_path = "/oidc_redirect",
        logout_path = "/oidc_logout",
        redirect_after_logout_uri = "/index.html",

        --Refresh the users id_token after 900 seconds without requiring re-authentication
        refresh_session_interval = 900,
        redirect_uri_scheme = "https",
        ssl_verify = "yes",
        --Try to silently renew the access token once it is expired if a refresh token is available.
        renew_access_token_on_expiry = true,
        --Expiration leeway for access_token renewal. Renewal will happen 10 minutes before the token expiration.
        access_token_expires_leeway = 600
      }

      -- call authenticate for OpenID Connect user authentication
      local res, err = require("resty.openidc").authenticate(opts)

      -- If there is an error, return 500
      if err then
        ngx.status = 500
        ngx.say(err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end

      -- headers with user info
      ngx.req.set_header("X-USER", res.id_token.sub)
      ngx.req.set_header("X-USER-MAIL", res.user.email);
      ngx.req.set_header("OIDC-TOKEN", res.id_token);
      ngx.req.set_header("ACCESS-TOKEN", res.access_token);
    }

    # REVERSE PROXY DESTINATION
    proxy_pass __REVERSE_ACCESS__;
  }

  location /api {
    access_by_lua_block {
      local opts = {
        discovery = "__OKTA_AUTHZ_SERVER__/.well-known/oauth-authorization-server",
      }

      -- call bearer_jwt_verify for OAuth 2.0 JWT validation
      local res, err = require("resty.openidc").bearer_jwt_verify(opts)

      if err or not res then
        ngx.status = 403
        ngx.say(err and err or "no access_token provided")
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end

      if res.scope ~= "__API_SCOPE__" then
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end
    }
    proxy_pass __REVERSE_API__;
  }

  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
      root   /usr/local/openresty/nginx/html;
  }
}
